# .github/workflows/fetch_docs.yml in Repo A
name: Fetch Docs from Repo B aka testing

on:
  repository_dispatch:
    types: [docs-update] # Must match the event-type sent from Repo B

jobs:
  fetch_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository (Repo A)
        uses: actions/checkout@v4

      - name: Display Trigger Info from Repo B
        run: |
          echo "Workflow triggered by repository_dispatch event."
          echo "Event type: ${{ github.event.action }}" # This will be 'docs-update'
          echo "Ref from Repo B: ${{ github.event.client_payload.ref }}"
          echo "SHA from Repo B: ${{ github.event.client_payload.sha }}"
          echo "Repository that triggered (from payload): ${{ github.event.client_payload.source_repo_full_name }}" # <--- CHANGED THIS LINE
          echo "Current repository (Repo A where workflow is running): ${{ github.repository.full_name }}" # Optional: to differentiate clearly

      - name: Checkout docs from Repo B
        uses: actions/checkout@v4
        with:
          repository: salomob-dynasafe/testing
          path: ./temp_repo_b # Checkout Repo B into a temporary directory
          token: ${{ secrets.PAT_TESTING }} # PAT with read access to Repo B

      - name: Copy docs directory
        run: |
          cleanup() {
            if [ -d "./temp_repo_b" ]; then
              echo "Cleaning up ./temp_repo_b directory..."
              rm -rf ./temp_repo_b
              echo "Cleanup complete."
            else
              echo "./temp_repo_b directory not found, no cleanup needed."
            fi
          }
          REPO=$(echo ${{ github.event.client_payload.source_repo_full_name }} | awk -F'/' '{print $2}')
          set -xe
          trap cleanup EXIT
          ls -halt
          mv ./temp_repo_b/docs ./docs/$REPO
          ls -hlt ./docs
          ls -hlt ./docs/$REPO

      - name: Commit and Push Docs to Repo A
        run: |
          # Configure Git user for the commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add all changes in the 'docs' directory
          git add docs/

          # Check if there are any changes to commit
          # 'git status --porcelain' will output nothing if there are no changes
          if git status --porcelain | grep -q 'docs/'; then
            echo "Changes detected in docs/, committing and pushing..."
            git commit -m "Docs update from ${{ github.event.client_payload.source_repo_full_name }} (${{ github.event.client_payload.sha }})"
            git push origin HEAD # Push to the same branch that triggered the workflow
          else
            echo "No changes in docs/ directory. Skipping commit and push."
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x" # Use a recent Python version

      - name: Install MkDocs and dependencies
        run: |
          pip install mkdocs mkdocs-material # Install MkDocs and a common theme

      - name: Deploy Docs with MkDocs
        run: |
          mkdocs gh-deploy --force --clean --verbose
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
