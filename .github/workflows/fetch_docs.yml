# .github/workflows/fetch_docs.yml in Repo A
name: Fetch Docs from Repo B aka testing

on:
  repository_dispatch:
    types: [docs-update] # Must match the event-type sent from Repo B

jobs:
  fetch_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository (Repo A)
        uses: actions/checkout@v4

      - name: Display Trigger Info from ${{ github.event.client_payload.source_repo_full_name }}
        run: |
          echo "Workflow triggered by repository_dispatch event."
          echo "Event type: ${{ github.event.action }}" # This will be 'docs-update'
          echo "Ref from Repo B: ${{ github.event.client_payload.ref }}"
          echo "SHA from Repo B: ${{ github.event.client_payload.sha }}"
          echo "Repository that triggered (from payload): ${{ github.event.client_payload.source_repo_full_name }}"
          echo "Current repository (Repo A where workflow is running): ${{ github.repository.full_name }}"

      - name: Checkout docs from ${{ github.event.client_payload.source_repo_full_name }}
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.source_repo_full_name }}
          path: ./${{ github.event.client_payload.sha }} # Checkout Repo B into a temporary directory
          token: ${{ secrets.PAT_TESTING }} # PAT with read access to Repo B

      - name: Copy docs directory
        run: |
          set -xe
          cleanup() {
            if [ -d "./${{ github.event.client_payload.sha }}" ]; then
              echo "Cleaning up ./${{ github.event.client_payload.sha }} directory..."
              rm -rf ./${{ github.event.client_payload.sha }}
              echo "Cleanup complete."
            else
              echo "./${{ github.event.client_payload.sha }} directory not found, no cleanup needed."
            fi
          }
          echo "Starting rsync operation into subdirectory..."
          trap cleanup EXIT

          # Extract just the repository name from the full name (e.g., "owner/repo-name" -> "repo-name")
          SOURCE_REPO_FULL_NAME="${{ github.event.client_payload.source_repo_full_name }}"
          SOURCE_REPO_NAME=$(basename "$SOURCE_REPO_FULL_NAME") # Extracts "repo-name"

          TARGET_DOCS_DIR="./docs/$SOURCE_REPO_NAME"

          # Create the target subdirectory if it doesn't exist
          if [ -d "$TARGET_DOCS_DIR" ]; then
              echo "Directory '$TARGET_DOCS_DIR' already exists."
          else
              echo "Directory '$TARGET_DOCS_DIR' does not exist. Attempting to create it..."
              # Create the target subdirectory if it doesn't exist
              mkdir -p "$TARGET_DOCS_DIR"

              # Check the exit status of the last command (mkdir).
              # 0 usually means success, non-zero means an error.
              if [ $? -eq 0 ]; then
                  echo "Directory '$TARGET_DOCS_DIR' successfully created."
              else
                  echo "Failed to create directory '$TARGET_DOCS_DIR'."
                  # Exit the script if directory creation fails, as subsequent operations might depend on it.
                  exit 1
              fi
          fi

          rsync -av --delete ./${{ github.event.client_payload.sha }}/docs/ "$TARGET_DOCS_DIR/"

      - name: Commit and Push Docs to Repo A
        run: |
          set -xe
          # Configure Git user for the commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add all changes in the 'docs' directory
          git add docs/

          # Check if there are any changes to commit
          # 'git status --porcelain' will output nothing if there are no changes
          if git status --porcelain | grep -q 'docs/'; then
            echo "Changes detected in docs/, committing and pushing..."
            git commit -m "Docs update from ${{ github.event.client_payload.source_repo_full_name }} (${{ github.event.client_payload.sha }})"
            git push origin HEAD # Push to the same branch that triggered the workflow
          else
            echo "No changes in docs/ directory. Skipping commit and push."
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x" # Use a recent Python version

      - name: Install MkDocs and dependencies
        run: |
          pip install mkdocs mkdocs-material # Install MkDocs and a common theme

      - name: Deploy Docs with MkDocs
        run: |
          mkdocs gh-deploy --force --clean --verbose
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
